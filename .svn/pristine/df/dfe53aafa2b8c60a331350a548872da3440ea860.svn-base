--------类说明--------
--目前只以最大权位DWORD个数1为基础定义了   超出再另行扩展   
local MAX_RIGHT_COUNT = 1
local MASK_CHI_HU_RIGHT = 0x0fffffff

--扑克逻辑类定义
local CChiHuRight = class("CChiHuRight")
--扑克逻辑类对象实例化
function CChiHuRight.create()
    local sparrow = CChiHuRight.new()
    return sparrow
end
----扑克逻辑类对象属性   初始化值
--@param
--@return
function CChiHuRight:ctor()
    self.visibleSize = CCDirector:sharedDirector():getVisibleSize()
    --静态变量
    self.m_bInit = false;
    self.m_dwRightMask = {0};
    self.m_dwRight = {0}
end

----等于  =
--@param
--@return
function CChiHuRight:Equal(dwRight1,dwRight2)
	
end
----取反 ~
--@param
--@return
function CChiHuRight:Not(dwRight)
    return Bit:_not(dwRight)
end
----与  &
--@param
--@return
function CChiHuRight:And(dwRight1,dwRight2)
    return Bit:_and(dwRight1,dwRight2)
end
----或 |
--@param
--@return
function CChiHuRight:Or(dwRight1,dwRight2)
    return Bit:_or(dwRight1,dwRight2)
end
----与等于  &=
--@param
--@return
function CChiHuRight:AndEqual( dwRight )
    
    local bNavigate = false;
    --验证权位
    if( not self:IsValidRight( dwRight ) ) then
    
        --验证取反权位
--        if( !IsValidRight( ~dwRight ) ) return *this;
        --调整权位
        local dwHeadRight = self:And((self:Not(dwRight)),0xF0000000);
        local dwTailRight = self:And(dwRight,MASK_CHI_HU_RIGHT);
        dwRight = self:Or(dwHeadRight,dwTailRight);
        bNavigate = true;
    end
    for i = 0, table.getn(self.m_dwRightMask)-1 do
        if( (self:And(dwRight,self.m_dwRightMask[i+1])) or (i==0 and dwRight<0x10000000) ) then
        
            self.m_dwRight[i+1] = self:And(self.m_dwRight[i+1], self:And(dwRight,MASK_CHI_HU_RIGHT));
            
        elseif( not bNavigate ) then
        
            self.m_dwRight[i+1] = 0;
            
        end
    end

    return ;
end
----或等于  |=
--@param
--@return
function CChiHuRight:OrEqual(dwRight2)
    --验证权位
    if( not self:IsValidRight( dwRight2 ) ) then return ; end
    for i = 0 , table.getn(self.m_dwRightMask)-1 do
        if( self:And(dwRight2,self.m_dwRightMask[i+1])>0 or (i==0 and dwRight2<0x10000000) ) then
            self.m_dwRight[i+1] = self:Or(self.m_dwRight[i+1],self:And(dwRight2,MASK_CHI_HU_RIGHT))
            break
        end
    end
    return ;
end
----左移  <<
--@param
--@return
function CChiHuRight:BLShift(nScr , nMoveLen)
    return Bit:_lshift(nScr,nMoveLen)
    --FGameDC:getDC():GetLRShift(nScr , nMoveLen, true);
end
----右移  >>
--@param
--@return
function CChiHuRight:BRShift(nScr , nMoveLen)
    return Bit:_rshift(nScr,nMoveLen)
    --FGameDC:getDC():GetLRShift(nScr , nMoveLen, false);
end
----是否权位为空
--@param
--@return
function CChiHuRight:IsEmpty()
    for i = 0, table.getn(self.m_dwRight)-1 do
        if self.m_dwRight[i+1]~=0 then 
            return false 
        end
    end
    return true;
end
----设置权位为空
--@param
--@return
function CChiHuRight:SetEmpty()
    for i = 1,table.getn(self.m_dwRight) do
        self.m_dwRight[i]=0;
    end
    return;
end

----检查仅位是否正确
--@param
--@return
function CChiHuRight:IsValidRight(dwRight)
    local dwRightHead = Bit:_and(dwRight,0xF0000000);
    for i = 0 , table.getn(self.m_dwRightMask)-1 do
        if( self.m_dwRightMask[i+1] == dwRightHead ) then return true; end
    end
    return false;
end

return CChiHuRight


----静态变量
--bool        CChiHuRight::m_bInit = false;
--DWORD       CChiHuRight::m_dwRightMask[MAX_RIGHT_COUNT];
--
----构造函数
--CChiHuRight::CChiHuRight()
--{
--    ZeroMemory( m_dwRight,sizeof(m_dwRight) );
--
--    if( !m_bInit )
--    {
--        m_bInit = true;
--        for( BYTE i = 0; i < CountArray(m_dwRightMask); i++ )
--        {
--            if( 0 == i )
--                m_dwRightMask[i] = 0;
--            else
--                m_dwRightMask[i] = (DWORD(pow(2.f,i-1)))<<28;
--        }
--    }
--}
--
----赋值符重载
--CChiHuRight & CChiHuRight::operator = ( DWORD dwRight )
--{
--    DWORD dwOtherRight = 0;
--    --验证权位
--    if( !IsValidRight( dwRight ) )
--    {
--        --验证取反权位
--        AWASSERT( IsValidRight( ~dwRight ) );
--        if( !IsValidRight( ~dwRight ) ) return *this;
--        dwRight = ~dwRight;
--        dwOtherRight = MASK_CHI_HU_RIGHT;
--    }
--
--    for( BYTE i = 0; i < CountArray(m_dwRightMask); i++ )
--    {
--        if( (dwRight&m_dwRightMask[i]) || (i==0&&dwRight<0x10000000) )
--            m_dwRight[i] = dwRight&MASK_CHI_HU_RIGHT;
--        else m_dwRight[i] = dwOtherRight;
--    }
--
--    return *this;
--}
--
----与等于
--CChiHuRight & CChiHuRight::operator &= ( DWORD dwRight )
--{
--    bool bNavigate = false;
--    --验证权位
--    if( !IsValidRight( dwRight ) )
--    {
--        --验证取反权位
--        AWASSERT( IsValidRight( ~dwRight ) );
--        if( !IsValidRight( ~dwRight ) ) return *this;
--        --调整权位
--        DWORD dwHeadRight = (~dwRight)&0xF0000000;
--        DWORD dwTailRight = dwRight&MASK_CHI_HU_RIGHT;
--        dwRight = dwHeadRight|dwTailRight;
--        bNavigate = true;
--    }
--
--    for( BYTE i = 0; i < CountArray(m_dwRightMask); i++ )
--    {
--        if( (dwRight&m_dwRightMask[i]) || (i==0&&dwRight<0x10000000) )
--        {
--            m_dwRight[i] &= (dwRight&MASK_CHI_HU_RIGHT);
--        }
--        else if( !bNavigate )
--            m_dwRight[i] = 0;
--    }
--
--    return *this;
--}
--
----或等于
--CChiHuRight & CChiHuRight::operator |= ( DWORD dwRight )
--{
--    --验证权位
--    if( !IsValidRight( dwRight ) ) return *this;
--
--    for( BYTE i = 0; i < CountArray(m_dwRightMask); i++ )
--    {
--        if( (dwRight&m_dwRightMask[i]) || (i==0&&dwRight<0x10000000) )
--        {
--            m_dwRight[i] |= (dwRight&MASK_CHI_HU_RIGHT);
--            break;
--        }
--    }
--
--    return *this;
--}
--
----与
--CChiHuRight CChiHuRight::operator & ( DWORD dwRight )
--{
--    CChiHuRight chr = *this;
--    return (chr &= dwRight);
--}
--
----与
--CChiHuRight CChiHuRight::operator & ( DWORD dwRight ) const
--{
--    CChiHuRight chr = *this;
--    return (chr &= dwRight);
--}
--
----或
--CChiHuRight CChiHuRight::operator | ( DWORD dwRight )
--{
--    CChiHuRight chr = *this;
--    return chr |= dwRight;
--}
--
----或
--CChiHuRight CChiHuRight::operator | ( DWORD dwRight ) const
--{
--    CChiHuRight chr = *this;
--    return chr |= dwRight;
--}
--
----相等
--bool CChiHuRight::operator == ( DWORD dwRight ) const
--{
--    CChiHuRight chr;
--    chr = dwRight;
--    return (*this)==chr;
--}
--
----相等
--bool CChiHuRight::operator == ( const CChiHuRight chr ) const
--{
--    for( WORD i = 0; i < CountArray( m_dwRight ); i++ )
--    {
--        if( m_dwRight[i] != chr.m_dwRight[i] ) return false;
--    }
--    return true;
--}
--
----不相等
--bool CChiHuRight::operator != ( DWORD dwRight ) const
--{
--    CChiHuRight chr;
--    chr = dwRight;
--    return (*this)!=chr;
--}
--
----不相等
--bool CChiHuRight::operator != ( const CChiHuRight chr ) const
--{
--    return !((*this)==chr);
--}
--
----是否权位为空
--bool CChiHuRight::IsEmpty()
--{
--    for( BYTE i = 0; i < CountArray(m_dwRight); i++ )
--        if( m_dwRight[i] ) return false;
--    return true;
--}
--
----设置权位为空
--void CChiHuRight::SetEmpty()
--{
--    ZeroMemory( m_dwRight,sizeof(m_dwRight) );
--    return;
--}
--
----获取权位数值
--BYTE CChiHuRight::GetRightData( DWORD dwRight[], BYTE cbMaxCount )
--{
--    AWASSERT( cbMaxCount >= CountArray(m_dwRight) );
--    if( cbMaxCount < CountArray(m_dwRight) ) return 0;
--
--    CopyMemory( dwRight,m_dwRight,sizeof(DWORD)*CountArray(m_dwRight) );
--    return CountArray(m_dwRight);
--}
--
----设置权位数值
--bool CChiHuRight::SetRightData( const DWORD dwRight[], BYTE cbRightCount )
--{
--    AWASSERT( cbRightCount <= CountArray(m_dwRight) );
--    if( cbRightCount > CountArray(m_dwRight) ) return false;
--
--    ZeroMemory( m_dwRight,sizeof(m_dwRight) );
--    CopyMemory( m_dwRight,dwRight,sizeof(DWORD)*cbRightCount );
--    
--    return true;
--}
--
----检查仅位是否正确
--bool CChiHuRight::IsValidRight( DWORD dwRight )
--{
--    DWORD dwRightHead = dwRight & 0xF0000000;
--    for( BYTE i = 0; i < CountArray(m_dwRightMask); i++ )
--        if( m_dwRightMask[i] == dwRightHead ) return true;
--    return false;
--}